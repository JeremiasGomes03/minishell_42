FUNÇÃO parse_input(linha_entrada)
    // Validação inicial da linha
    SE linha_entrada está_vazia ENTÃO
        RETORNA NULL
    FIM SE

    // 1. Análise léxica (Tokenização)
    tokens = tokenizar_linha(linha_entrada)
    SE erro_na_tokenização ENTÃO
        tratar_erro("Erro na tokenização")
        RETORNA NULL
    FIM SE

    // 2. Expansão de variáveis e wildcards
    PARA CADA token EM tokens FAÇA
        SE token contém '$' ENTÃO
            expandir_variáveis(token)
        FIM SE
        
        SE token contém '*' ENTÃO
            expandir_wildcards(token)
        FIM SE
    FIM PARA

    // 3. Separação de comandos por pipes
    comandos = separar_por_pipes(tokens)
    
    // 4. Análise sintática
    PARA CADA comando EM comandos FAÇA
        // Verificar sintaxe de redirecionamentos
        SE tem_redirecionamento(comando) ENTÃO
            validar_redirecionamentos(comando)
            SE erro_redirecionamento ENTÃO
                tratar_erro("Erro no redirecionamento")
                RETORNA NULL
            FIM SE
        FIM SE

        // Verificar aspas
        SE tem_aspas(comando) ENTÃO
            validar_aspas(comando)
            SE erro_aspas ENTÃO
                tratar_erro("Aspas não fechadas")
                RETORNA NULL
            FIM SE
        FIM SE
    FIM PARA

    // 5. Construção da árvore de comandos
    árvore_comandos = criar_árvore()
    
    PARA CADA comando EM comandos FAÇA
        nó = criar_nó_comando()
        
        // Separar comando e argumentos
        nó.comando = obter_comando(comando)
        nó.argumentos = obter_argumentos(comando)
        
        // Processar redirecionamentos
        SE tem_redirecionamento(comando) ENTÃO
            nó.redirecionamentos = processar_redirecionamentos(comando)
        FIM SE
        
        adicionar_à_árvore(árvore_comandos, nó)
    FIM PARA

    RETORNA árvore_comandos
FIM FUNÇÃO




FUNÇÃO tokenizar_linha(linha)
    tokens = []
    token_atual = ""
    estado_aspas = NENHUM  // NENHUM, SIMPLES, DUPLAS
    
    PARA CADA caractere EM linha FAÇA
        SE caractere É aspas_simples E estado_aspas == NENHUM ENTÃO
            estado_aspas = SIMPLES
        SENÃO SE caractere É aspas_duplas E estado_aspas == NENHUM ENTÃO
            estado_aspas = DUPLAS
        SENÃO SE caractere É aspas_simples E estado_aspas == SIMPLES ENTÃO
            estado_aspas = NENHUM
        SENÃO SE caractere É aspas_duplas E estado_aspas == DUPLAS ENTÃO
            estado_aspas = NENHUM
        SENÃO SE caractere É espaço E estado_aspas == NENHUM ENTÃO
            SE token_atual NÃO está_vazio ENTÃO
                adicionar_token(tokens, token_atual)
                token_atual = ""
            FIM SE
        SENÃO
            token_atual += caractere
        FIM SE
    FIM PARA
    
    SE estado_aspas != NENHUM ENTÃO
        RETORNA erro("Aspas não fechadas")
    FIM SE
    
    SE token_atual NÃO está_vazio ENTÃO
        adicionar_token(tokens, token_atual)
    FIM SE
    
    RETORNA tokens
FIM FUNÇÃO