|
<
>
<< eof
cat <<
||||||
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<>><<<<><>>><><><><>><><>
><<>><<>><<><
<><T<.h=hdf,>
<|>
|<>
<>|
/
$
$$$
///////
ls
pwd
echo 'oi'
echo "oi"
echo oi
/bin/ls
/bin/ls -l
/bin/ls -l -a
'/bin/ls' '-l' -a
'/bin/ls' "-l" '-a'
"/bin/ls" '-l' "-a'
"/bin/ls" "-l" "-a"
'/bin/ls' '-l' '-a'
'/bin/cat' '-e' Makefile
ls $PATH
ls '$PATH'
ls "$PATH"
"$PATH" ls   (revisar)
'$PATH' ls   (revisar)
$PATH ls     (revisar)
'ls -l'
"ls -l'      (revisar)
"ls $PATH"   (revisar)
'ls $PATH'
'$PATH ls'
"$PATH ls"   (revisar)
$PATH ls     (revisar)
'$PAT ls'
'ls $PAT'
echo $PATH
echo '$PATH'
echo "$HOME"
export adriel="jeremias"  (revisar)
echo $adriel
unset adriel
echo $adriel
cd /
cd ~
cd /inexistente
pwd
ls | pwd
ls | pwd | echo 'oi'
ls | sort
grep root /etc/passwd
ls -la | grep ".c" | wc -l
ls -la | grep ".c" > output.txt
ls > redirect.txt
ls | pwd | echo 'teste' > redirect_pipe.txt
cat << eof > redirect_hrdc.txt
>a
ls -la | grep ".c" >> tst.txt
exit oskaokds
Exit
exit 0
exit 1
exit '0'
exit '1'
$?
cat << eof | wc -l
cat << eof | grep "linha"
cat << "eof"
cat << 'eof'
cat << eof $PATH
cat << eof '$PATH'
cat << eof "$PATH"
cat << eof CTRL + D
cat << eof CTRL + C
cat CTRL + D
cat CTRL + C




echo start | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | cat | wc




→ Output "Hello".

---

## 4. **Pipes (`|`)**
- [ ] Test 4.1: `ls | grep .c` → List files ending with `.c`.
- [ ] Test 4.2: `echo "hello" | cat | wc -c` → Output `6`.

---

## 5. **Environment Variables**
### 5.1 Expansion
- [ ] Test 5.1.1: `echo $PATH` → Output PATH variable.
- [ ] Test 5.1.2: `echo "$USER"` → Output current user (quotes preserve `$`).

### 5.2 Exit Status (`$?`)
- [ ] Test 5.2.1: `invalid_command` then `echo $?` → Output `127`.
- [ ] Test 5.2.2: `ls` then `echo $?` → Output `0`.

---

## 6. **Signal Handling**
### 6.1 Interactive Mode
- [ ] Test 6.1.1: `Ctrl+C` → New prompt on new line.
- [ ] Test 6.1.2: `Ctrl+D` → Exits shell.
- [ ] Test 6.1.3: `Ctrl+\` → Does nothing (no crash).

---

## 7. **Error Handling**
### 7.1 Syntax Errors
- [ ] Test 7.1.1: `echo "unclosed_quote` → Error message.
- [ ] Test 7.1.2: `ls |` → Error "syntax error near `|`".

### 7.2 Invalid Commands
- [ ] Test 7.2.1: `invalid_command` → "command not found".

---

## 8. **Memory Leaks**
- [ ] Test 8.1: Run `valgrind --leak-check=full ./minishell` and execute all tests above → No leaks in **your code**.

---

## How to Use This File:
1. Run tests in order.
2. For heredoc tests, type input as shown.
3. Use `valgrind` for memory checks (Section 8).
4. Compare results to bash behavior.

**Notes**:
- For automated testing, create a script that feeds input to `minishell` (e.g., `echo "ls" | ./minishell`).
- Test edge cases (e.g., `> file`, `>> file`, mixed pipes/redirections).